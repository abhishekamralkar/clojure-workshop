* Skeleton of the workshop
** Day 1
**** Get your hands dirty [1.5h]
- Emacs, Leiningen, Cider, Paredit
- Arithmetic
- Symbols, Keywords, Vars
- Booleans, control structures
- Bindings
**** Introduction [0.5h]
- The Lisp philosophy (quotes)
- The Clojure philosophy (simplicity, jvm, immutability)
- Contrast with other JVM languages (java, scala, groovy, JRuby)
- Clojure community, libraries and books
- Where to find help
**** Break [0.5h]
**** Clojure's persistent data structures [1h]
- Sequences (lists and vectors)
    - Create and manipulate sequences (map, filter, reduce)
    - Laziness (infinite sequences, utilizing laziness)
    - Immutability with persistent data structures (trie)
- Sets and Maps
    - Create and manipulate
- Functions
    - Recursion
    - Higher-order functions
**** Some practical examples [1h]
- Working with libraries
- require/import
- read/load/compile and how it works
- Read from the filesystem, parse json, etc
**** Lunch
** Day 2
**** Modeling
- Create and extend abstractions with Multimethods, Protocols, and Records
- Proper use of maps, vectors and schema to model the domain
- Horizontal layering and vertical partitioning of code using namespaces
- Connect code and configs to build up a final app
**** Java interop [1.5h]
- Calling java code (like java.util.concurrent classes or jsoup) from clojure
- Extending java code in clojure
**** Break [0.5h]
**** Concurrency and parallelism [2h]
- pmap
- futures, promises
- java.util.concurrent utilities
- Concurrency primitives in clojure (atom, agent, var, ref)
**** Macros [0.25h]
- A couple of very simple macros to give a feel for manipulating code as data
**** Spec [0.25h]
- A couple of very simple examples to demonstrate clojure.spec
**** Lunch
